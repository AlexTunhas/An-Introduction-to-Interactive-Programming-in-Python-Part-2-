# Link to the second project of the course called "Blackjack" which consists of a simple version the classic cards game of the same name, in which the player tries to 
# reach a count as close to 21 without busting in order to beat the dealer and score a point:

# https://py2.codeskulptor.org/#user49_CDINPeh2On_1.py

# Instructions: J, Q and K count as 10 and Aces can count as 1 or 10. By clicking on the "Hit" button the player can come closer to a count of 21 or bust. Meanwhile, 
# by clicking on the "Stand" button the dealer will deal cards to himself until at least he reached a count of 17 or has busted.

##

# Code: 

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
outcome2 = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.cards = []            

    def __str__(self):
        # return a string representation of a hand
        ans = ""
        for i in range(len(self.cards)):
            ans += str(self.cards[i]) + " "
        return "Hand contains " + ans
    
    def add_card(self, card):
        # add a card object to a hand
        self.cards.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        hand_value = 0
        for card in self.cards:
            for key, value in VALUES.items():
                if str(card) == (SUITS[0] + key) or str(card) == (SUITS[1] + key) or str(card) == (SUITS[2] + key) or str(card) == (SUITS[3] + key):
                    hand_value += value
        for card in self.cards:
            if str(card) == (SUITS[0] + RANKS[0]) or str(card) == (SUITS[1] + RANKS[0]) or str(card) == (SUITS[2] + RANKS[0]) or str(card) == (SUITS[3] + RANKS[0]):
                if (hand_value + 10) <= 21:
                    return (hand_value + 10)
                else:
                    return hand_value       
        return hand_value               
    
    def draw(self, canvas, pos):
        
        for card in self.cards:
            Card.draw(card, canvas, pos)
            pos[0] += 100        
    
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.deck_cards = []
        for suit in SUITS:
            for rank in RANKS:
                self.deck_cards.append(Card(suit, rank))
        
    def shuffle(self):
        # shuffle the deck 
        # use random.shuffle()
        random.shuffle(self.deck_cards)

    def deal_card(self):
        # deal a card object from the deck
        return self.deck_cards[-1] and self.deck_cards.pop()
           
    
    def __str__(self):
        # return a string representing the deck
        ans = ""
        for i in range(len(self.deck_cards)):
            ans += str(self.deck_cards[i]) + " "
        return "Deck contains " + ans

    
#define event handlers for buttons
def deal():
    global outcome, in_play, Player, Dealer, outcome2, score, deck
    
    deck = Deck()
    deck.shuffle()
    Player = Hand()
    Dealer = Hand()
    
    Player.add_card(deck.deal_card())
    Dealer.add_card(deck.deal_card())
    Player.add_card(deck.deal_card())   
    Dealer.add_card(deck.deal_card())
    
    outcome = "Hit or Stand?"
    outcome2 = ""
    
    if in_play == True:
        score -= 1
    
    in_play = True

def hit():
    global in_play, score, outcome2, outcome
    
    if in_play == True:
        if Player.get_value() <= 21:
            Player.add_card(deck.deal_card())
        if Player.get_value() > 21:
            in_play = False
            score -= 1
            outcome2 = "You have busted"
            outcome = "New deal?"

    # if the hand is in play, hit the player  
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    global in_play, score, outcome2, outcome
    
    if in_play == True:
        while Dealer.get_value() < 17:
            Dealer.add_card(deck.deal_card())
        if Dealer.get_value() > 21:
            outcome2 = "The dealer busted"
            score += 1
        else:
            if Dealer.get_value() < Player.get_value():
                outcome2 = "You win"
                score += 1       
            else:
                outcome2 = "Dealer wins"
                score -= 1
        in_play = False 
        outcome = "New deal?"
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    # assign a message to outcome, update in_play and score

    
# draw handler    
def draw(canvas):
    
    Hand.draw(Player, canvas, [100, 390])
    Hand.draw(Dealer, canvas, [100, 180])
    if in_play == True:
        if "C" == Dealer.__str__()[14] or "S" == Dealer.__str__()[14]:
            canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [100 + CARD_BACK_CENTER[0], 180 + CARD_BACK_CENTER[1]], CARD_SIZE)
        elif "D" == Dealer.__str__()[14] or "H" == Dealer.__str__()[14]:
            canvas.draw_image(card_back, [CARD_BACK_CENTER[0] + CARD_BACK_SIZE[0], CARD_BACK_CENTER[1]], CARD_BACK_SIZE, [100 + CARD_BACK_CENTER[0], 180 + CARD_BACK_CENTER[1]], CARD_SIZE)
    canvas.draw_text("Player", (85, 370), 30, 'Black')
    canvas.draw_text("Dealer", (85, 160), 30, 'Black')
    canvas.draw_text("Blackjack", (100, 80), 50, 'Black')
    canvas.draw_text("Score " + str(score), (380, 80), 50, 'Black')
    canvas.draw_text(outcome, (250, 370), 25, 'Red')
    canvas.draw_text(outcome2, (250, 160), 25, 'Red')


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

# create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()
